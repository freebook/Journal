<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V5.0//EN"
	"/usr/share/xml/docbook/schema/dtd/4.5/docbookx.dtd" [
	<!ENTITY article.author.xml 		SYSTEM "../common/article.author.xml">
	<!ENTITY book.info.legalnotice.xml 	SYSTEM "../common/book.info.legalnotice.xml">
	<!ENTITY book.info.abstract.xml		SYSTEM "../common/book.info.abstract.xml">
]>
<article xml:base="http://netkiller.github.io/journal/"
	xmlns="http://docbook.org/ns/docbook" xml:lang="zh-cn">
	<articleinfo>
		<title>PHP高级编程之发布订阅</title>
		<subtitle></subtitle>
		&article.author.xml;
		
		<copyright>
			<year>2014</year>
			<holder>http://netkiller.github.io</holder>
		</copyright>		
		
		&book.info.legalnotice.xml;
		<abstract>

		</abstract>
		&book.info.abstract.xml;
		<keywordset>
			<keyword></keyword>
			<keyword></keyword>
			<keyword></keyword>
			<keyword></keyword>
		</keywordset>
		<pubdate>2014-09-05</pubdate>
		<release>$Id: aa1f347c4c25d9f6415ba2759c65c5b465bf68a2 $</release>
	</articleinfo>
	<!-- 
	<section id="what">
		<title>what-做什么</title>
	</section>
	<section id="why">
		<title>why-为什么做</title>
	</section>
	<section id="when">
		<title>when-何时做</title>
	</section>
	<section id="where">
		<title>where-何地做</title>
	</section>
	<section id="who">
		<title>who-谁去做</title>
	</section>
	<section id="how">
		<title>how-怎么做</title>
		<section>
			<title>SECTION</title>
		</section>		
	</section>
 	-->

		<section>
			<title>Redis 订阅发布代码</title>
			<para>订阅代码</para>
			<screen>
			<![CDATA[
<?php
$redis = new Redis();
$redis->connect('192.168.2.1',6379);
$channel = $argv[1];  // channel
$redis->subscribe(array('channel'.$channel), 'callback');
function callback($instance, $channelName, $message) {
  echo $channelName, "==>", $message,PHP_EOL;
}
			]]>
			</screen>
			<para>发布代码</para>
			<screen>
			<![CDATA[
<?php

$redis = new Redis();
$redis->connect('192.168.2.1',6379);
$channel = $argv[1];  // channel
$msg = $argv[2]; // msg
$redis->publish('channel'.$channel, $msg);
			]]>
			</screen>			
		</section>
		<section>
			<title>守护进程</title>
			<para>上面程序发布端运行后始终处在前台，终端会接收来自键盘的消息，可能会终止程序运行。我们采用守护进程方式，使之进入后台运行。</para>
			<screen>
			<![CDATA[
<?php
/*
Homepage: http://netkiller.github.io
Author: neo chan <netkiller@msn.com>
*/

class Example {
	/* config */
	const HOST = '192.168.2.1';
	const PORT = 6379;
	const MAXCONN = 2048;

	const pidfile = __CLASS__;
	const uid	= 80;
	const gid	= 80;
	
	protected $pool = NULL;
	protected $redis = NULL;

	public function __construct() {
		$this->pidfile = '/var/run/'.self::pidfile.'.pid';
		$this->redis = new Redis();
	}
	private function daemon(){
		if (file_exists($this->pidfile)) {
			echo "The file $this->pidfile exists.\n";
			exit();
		}
		
		$pid = pcntl_fork();
		if ($pid == -1) {
			 die('could not fork');
		} else if ($pid) {
			 // we are the parent
			 //pcntl_wait($status); //Protect against Zombie children
			exit($pid);
		} else {
			// we are the child
			file_put_contents($this->pidfile, getmypid());
			posix_setuid(self::uid);
			posix_setgid(self::gid);
			return(getmypid());
		}
	}
	private function run(){
		$this->pool = new Pool(self::MAXCONN, \ExampleWorker::class, []);

		$this->redis->connect(self::HOST, self::PORT);
		$channel = array('news', 'login', 'logout');
		$this->redis->subscribe($channel, 'callback');
		function callback($instance, $channelName, $message) {
  			echo $channelName, "==>", $message,PHP_EOL;
			//print_r($message);
			$this->pool->submit(new Fee($message));
		}
	
		$pool->shutdown();	
	}
	private function start(){
		$pid = $this->daemon();
		$this->run();
	}
	private function onestart(){
		$this->run();
	}	

	private function stop(){

		if (file_exists($this->pidfile)) {
			$pid = file_get_contents($this->pidfile);
			posix_kill($pid, 9); 
			unlink($this->pidfile);
		}
	}
	private function help($proc){
		printf("%s start | stop | onestart | help \n", $proc);
	}
	public function main($argv){
		if(count($argv) < 2){
			printf("please input help parameter\n");
			exit();
		}
		if($argv[1] === 'stop'){
			$this->stop();
		} else if($argv[1] === 'start'){
			$this->start();
		} else if ($argv[1] === 'onestart') {
			$this->onestart();
		} else{
			$this->help($argv[0]);
		}
	}
}

$example = new Example();
$example->main($argv);			
			]]>
			</screen>
			<para>收到任务通过$this->pool->submit将任务分配给线程程序处理</para>
		</section>
</article>