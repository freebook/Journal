<?xml version="1.0" encoding="UTF-8"?>
<!-- $Id: security.xml 651 2013-07-25 09:39:11Z netkiller $ -->
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V5.0//EN"
	"http://www.oasis-open.org/docbook/xml/5.0b5/dtd/docbook.dtd" [
	<!ENTITY article.author.xml 		SYSTEM "../common/article.author.xml">
	<!ENTITY book.info.legalnotice.xml 	SYSTEM "../common/book.info.legalnotice.xml">
	<!ENTITY book.info.abstract.xml		SYSTEM "../common/book.info.abstract.xml">
]>
<article xml:base="http://netkiller.sourceforge.net/article/"
	xmlns="http://docbook.org/ns/docbook" xml:lang="zh-cn">
	<articleinfo>
		<title>Linux 系统安全与优化配置</title>

		&article.author.xml;
		&book.info.legalnotice.xml;
		<abstract>
			<para>Linux 系统安全问题</para>
		</abstract>
		&book.info.abstract.xml;
		<keywordset>
			<keyword>linux</keyword>
			<keyword>mysql</keyword>
			<keyword>security</keyword>
		</keywordset>
	</articleinfo>

	<section>
		<title>Openssh 安全配置</title>
		<para>这节主要讲与SSH有关的安全配置</para>
		<section>
			<title>禁止root用户登录</title>
			<para>只允许普通用户登陆，然后通过su命令切换到root用过。后面还会将怎样限制su命令</para>
			<screen>
			<![CDATA[
PermitRootLogin no
			]]>
			</screen>
		</section>
		<section>
			<title>限制SSH验证重试次数</title>
			<para>超过3次socket连接会断开，效果不明显，有一点点用。</para>
			<screen>
			<![CDATA[
MaxAuthTries 3
			]]>
			</screen>
		</section>
		<section>
			<title>禁止证书登陆</title>
			<para>证书登陆非常安全，但是很有可能正常用户在你不知道情况下，给你安装了一个证书，他随时都可能进入你的系统</para>
			<para>任何一个有权限的用户都能很方便的植入一个证书到 .ssh/authorized_keys 文件中</para>
			<screen>
			<![CDATA[
PubkeyAuthentication no
AuthorizedKeysFile /dev/null
			]]>
			</screen>
		</section>
		<section>
			<title>使用证书替代密码认证</title>
			<para>是不是自相矛盾？ 这个跟上面讲的正好相反，这里只允许使用key文件登陆。</para>
			<screen>
			<![CDATA[
PasswordAuthentication no
			]]>
			</screen>
			<para>这种方式比起密码要安全的多，唯一要注意的地方就是证书被拷贝 ，建议你给证书加上 passphrase。</para>
			<para>证书的 passphrase 是可以通过openssl工具将其剥离的，SSH证书我没有试过，但是原理都差不多。</para>
		</section>
		<section>
			<title>图形窗口客户端记忆密码的问题</title>
			<para>当你使用XShell, Xftp, WinSCP, SecureCRT, SecureFX ......等等软件登录时，该软件都提供记住密码的功能，使你下次再登陆的时候无须输入密码就可以进入系统。这样做的确非常方便，</para>
			<para>但是你是否想过你的电脑一旦丢失或者被其他人进入，那有多么危险。我之前每天背着笔记本电脑上班，上面安装着XShell并且密码全部记忆在里面。这使我意识到一点电脑丢失，有多么可怕。</para>
			<para>禁止SSH客户端记住密码，你不要要求别人那么做。你也无法控制，最终我找到了一种解决方案。</para>
			<screen>
			<![CDATA[
ChallengeResponseAuthentication yes
			]]>
			</screen>
			<para>每次登陆都回提示你输入密码。密码保存也无效。</para>
		</section>
		<section>
			<title>关闭 GSSAPI</title>
			<screen>
			<![CDATA[
GSSAPIAuthentication no
#GSSAPIAuthentication yes
#GSSAPICleanupCredentials yes
#GSSAPICleanupCredentials yes
#GSSAPIStrictAcceptorCheck yes
#GSSAPIKeyExchange no
			]]>
			</screen>
		</section>
		<section>
			<title>禁止SSH端口映射</title>
			<para>禁止使用SSH映射Socks5翻墙等等</para>
			<screen>
			<![CDATA[
AllowTcpForwarding no
			]]>
			</screen>
		</section>
		<section>
			<title>IP地址限制</title>
			<para>只允许通过192.168.2.1,192.168.2.2 访问本机</para>
			<screen>
# vim /etc/hosts.allow
sshd:192.168.2.1,192.168.2.2

			</screen>
			<para>禁止所有人访问本机</para>
			<screen>
# vim /etc/hosts.deny
sshd:ALL
			</screen>
			<para>上面使白名单策略，你也可以采用黑名单策略。</para>
		</section>
	</section>

	<section>
		<title>Shell 安全</title>
		<section>
			<title>.history 文件</title>
			<para>SA的操作记录问题</para>
			<para>通过~/.bash_history文件记录系统管理员的操作记录，定制.bash_history格式</para>
			<screen>
HISTSIZE=1000
HISTFILESIZE=2000
HISTTIMEFORMAT="%Y-%m-%d-%H:%M:%S "
export HISTTIMEFORMAT
			</screen>
			<para>看看实际效果</para>
			<screen>
$ history | head
    1  2012-02-27-09:10:45 do-release-upgrade
    2  2012-02-27-09:10:45 vim /etc/network/interfaces
    3  2012-02-27-09:10:45 vi /etc/network/interfaces
    4  2012-02-27-09:10:45 ping www.163.com
			</screen>
		</section>

		<section>
			<title>sudo 安全问题</title>
			<para>/etc/sudoers</para>
			<screen>
			<![CDATA[
Cmnd_Alias WEBMASTER = /srv/nginx/sbin/nginx, /srv/php/sbin/php-fpm, !/srv/mysql/bin/*
www localhost = NETWORKING, SERVICES, DELEGATING, PROCESSES, WEBMASTER

Cmnd_Alias Database = /usr/bin/mysqldump, /srv/mysql/bin/mysql, /u01/oracle/10.x.x/bin/sqlplus
mysql localhost = NETWORKING, SERVICES, DELEGATING, PROCESSES, WEBMASTER, Database
			]]>
			</screen>
			<para>使用www用户测试登录，无误后修改SSH配置文件，禁止root登录。</para>
			<screen>
			<![CDATA[
vim /etc/ssh/sshd_config
PermitRootLogin no
			]]>
			</screen>
			<para>然后在测试从www sudo 执行命令, 可能成功启动nginx 与 php-fpm</para>
		</section>
		<section>
			<title>临时文件安全</title>
			<para>临时文件不应该有执行权限</para>
			<para>/tmp</para>
			<screen>
/dev/sda3 /tmp ext4 nosuid，noexec，nodev，rw 0 0
			</screen>
			<para>同时使用符号连接将/var/tmp 指向 /tmp</para>
			<para>/dev/shm</para>
			<screen>
none /dev/shm tmpfs defaults，nosuid，noexec，rw 0 0
			</screen>
		</section>
		<section>
			<title>执行权限 </title>
			<para>以数据库为例,从安全角度考虑我们需要如下更改</para>
			<screen>
chown mysql:mysql /usr/bin/mysql*
chmod 700 /usr/bin/mysql*
			</screen>
			<para>mysql用户是DBA专用用户, 其他用户将不能执行mysql等命令。</para>
		</section>

	</section>
	<section>
		<title>防火墙</title>
		<para>开启防火墙</para>
		<screen>
lokkit --enabled
		</screen>
		<section>
			<title>策略</title>
			<para>默认INPUT，FORWARD，OUTPUT 三个都是ACCEPT</para>
			<screen>
			<![CDATA[
-P INPUT ACCEPT
-P FORWARD ACCEPT
-P OUTPUT ACCEPT
			]]>
			</screen>
			<para>从安全的角度出发，INPUT，FORWARD，OUTPUT 三个都是DROP最安全，但配置的时候会给你带来非常多的不可预料的麻烦。</para>
			<screen>
			<![CDATA[
-P INPUT DROP
-P FORWARD DROP
-P OUTPUT DROP
			]]>
			</screen>
			<para>折中的方案，也是打多少硬件防火墙厂商所采用的方案，他们都是采用INPUT默认禁用所有，OUTPUT默认允许所有，你只要关注INPUT规则即可。</para>
			<screen>
			<![CDATA[
-P INPUT DROP
-P FORWARD ACCEPT
-P OUTPUT ACCEPT
			]]>
			</screen>
		</section>
		<section>
			<title>防止成为跳板机 </title>

			<para>封锁22等端口，避免相互跳转</para>
			<screen>
iptables -A OUTPUT -p tcp -m multiport --dports 22,21,873 -j REJECT
/etc/init.d/iptables save
iptables -L -n
			</screen>
			<para>web 服务器禁止使用ssh，作为跳板机</para>
			<para>用户将不能使用ssh命令登陆到其他电脑</para>
		</section>
	</section>

	<section>
		<title>Linux 系统资源调配</title>
		<section>
			<title>/etc/security/limits.conf</title>
			<para>很多资料上是这么写的</para>
			<screen>
* soft nofile 65535
* hard nofile 65535
 			</screen>
			<para>这样做是偷懒，会带来很多问题，如果你的服务器被攻击，由于你的设置，系统将耗光你的资源，直到没有任何响应为止，你可能键盘输入都成问题，你不得不重启服务器，但你会发现重启只能维持短暂几分钟，又会陷入无响应状态。</para>
			<screen>
			<![CDATA[
nobody soft nofile 4096
nobody hard nofile 8192
			]]>
			</screen>
			<para>为什么会设置为nobody用户呢？因为root用户启动系统后web 服务器会使用nobody用户创建子进程，socket连接实际上是nobody用户在处理。root 仅仅是守护父进程。</para>
			<screen>
mysql soft nofile 2048
mysql hard nofile 2048
			</screen>
			<para>针对 mysql 做限制</para>
			<tip>
 				<para>关于 nofile 即打开文件数，这个跟socket有非常紧密的关系，在linux系统中任何设备都被看做是一个文件（字符设备），你连接一个鼠标，键盘，摄像头，硬盘等等都被看作打开一个设备文件，所以默认1024是远远不够的。</para>
 			</tip>
		</section>


		<section>
			<title>关闭写磁盘I/O功能</title>
			<para>对于某些文件没必要记录文件的访问时间，由其是在高并发的IO密集操作的环境下，通过两个参数可以实现noatime,nodiratime减少不必要的系统IO资源。</para>
			<para>编辑/etc/fstab 添加 noatime,nodiratime 参数</para>
			<screen>
/dev/sdb1    /www          ext4    noatime,nodiratime        0 0
			</screen>
		</section>

	</section>

	<section id="pam">
		<title>PAM 插件认证加固配置</title>
		<para>配置文件</para>
		<screen>
ls  /etc/pam.d/
chfn         crond                login    passwd            remote    runuser-l          smtp          ssh-keycat  sudo-i       system-auth-ac
chsh         fingerprint-auth     newrole  password-auth     run_init  smartcard-auth     smtp.postfix  su          su-l
config-util  fingerprint-auth-ac  other    password-auth-ac  runuser   smartcard-auth-ac  sshd          sudo        system-auth
		</screen>
		<para>认证插件</para>
		<screen>
ls /lib64/security/
		</screen>
		<section id="pam_tally2.so">
			<title>pam_tally2.so</title>
			<para>此模块的功能是，登陆错误输入密码3次，5分钟后自动解禁，在未解禁期间输入正确密码也无法登陆。</para>
			<para>在配置文件 /etc/pam.d/sshd 顶端加入</para>
			<screen>
auth required pam_tally2.so deny=3 onerr=fail unlock_time=300
			</screen>
			<para>查看失败次数</para>
			<screen>
# pam_tally2
Login           Failures Latest failure     From
root               14    07/12/13 15:44:37  192.168.6.2
neo                 8    07/12/13 15:45:36  192.168.6.2
			</screen>
			<para>重置计数器</para>
			<screen>
# pam_tally2 -r -u root
Login           Failures Latest failure     From
root               14    07/12/13 15:44:37  192.168.6.2

# pam_tally2 -r -u neo
Login           Failures Latest failure     From
neo                 8    07/12/13 15:45:36  192.168.6.2
			</screen>
			<para>pam_tally2 计数器日志保存在 /var/log/tallylog 注意，这是二进制格式的文件</para>
			<example>
				<title>/etc/pam.d/sshd - pam_tally2.so</title>
				<screen>
# cat  /etc/pam.d/sshd
#%PAM-1.0
auth required pam_tally2.so deny=3 onerr=fail unlock_time=300

auth	   required	pam_sepermit.so
auth       include      password-auth
account    required     pam_nologin.so
account    include      password-auth
password   include      password-auth
# pam_selinux.so close should be the first session rule
session    required     pam_selinux.so close
session    required     pam_loginuid.so
# pam_selinux.so open should only be followed by sessions to be executed in the user context
session    required     pam_selinux.so open env_params
session    optional     pam_keyinit.so force revoke
session    include      password-auth
				</screen>
			</example>
			<para>以上配置root用户不受限制, 如果需要限制root用户，参考下面</para>
			<screen>
auth required pam_tally2.so deny=3 unlock_time=5 even_deny_root root_unlock_time=1800
			</screen>
		</section>
		<section id="pam_listfile.so">
			<title>pam_listfile.so</title>
			<subtitle>用户登陆限制</subtitle>
			<para>将下面一行添加到 /etc/pam.d/sshd 中，这里采用白名单方式，你也可以采用黑名单方式</para>
			<screen>
auth       required     pam_listfile.so item=user sense=allow file=/etc/ssh/whitelist onerr=fail
			</screen>
			<para>将允许登陆的用户添加到 /etc/ssh/whitelist，除此之外的用户将不能通过ssh登陆到你的系统</para>
			<screen>
# cat /etc/ssh/whitelist
neo
www
			</screen>
			<example>
				<title>/etc/pam.d/sshd - pam_listfile.so</title>
				<screen>
# cat /etc/pam.d/sshd
#%PAM-1.0
auth       required     pam_listfile.so item=user sense=allow file=/etc/ssh/whitelist onerr=fail
auth       required     pam_tally2.so deny=3 onerr=fail unlock_time=300

auth	   required	pam_sepermit.so
auth       include      password-auth
account    required     pam_nologin.so
account    include      password-auth
password   include      password-auth
# pam_selinux.so close should be the first session rule
session    required     pam_selinux.so close
session    required     pam_loginuid.so
# pam_selinux.so open should only be followed by sessions to be executed in the user context
session    required     pam_selinux.so open env_params
session    optional     pam_keyinit.so force revoke
session    include      password-auth
				</screen>
			</example>
			<para>sense=allow	白名单方式, sense=deny	黑名单方式</para>
			<screen>
auth       required     pam_listfile.so item=user sense=deny file=/etc/ssh/blacklist onerr=fail
			</screen>
			<para>更多细节请查看手册 $ man pam_listfile</para>
		</section>

		<section id="pam_access.so">
			<title>pam_access.so</title>
			<para>编辑 /etc/pam.d/sshd 文件，加入下面一行</para>
			<screen>
account required pam_access.so
			</screen>
			<para>保存后重启sshd进程</para>
			<para>编辑 /etc/security/access.conf 文件</para>
			<screen>
			<![CDATA[
cat >>  /etc/security/access.conf << EOF

- : root : ALL EXCEPT 192.168.6.1
EOF
			]]>
			</screen>
			<para>只能通过 192.168.6.1 登陆, 添加多个IP地址</para>
			<screen>
- : root : ALL EXCEPT 192.168.6.1 192.168.6.2
			</screen>
			<para>测试是否生效</para>
		</section>
		<section id="pam_wheel.so">
			<title>pam_wheel.so</title>
			<para>限制普通用户通过su命令提升权限至root. 只有属于wheel组的用户允许通过su切换到root用户</para>
			<para>编辑 /etc/pam.d/su 文件，去掉下面的注释</para>
			<screen>
auth		required	pam_wheel.so use_uid
			</screen>
			<para>修改用户组别，添加到wheel组</para>
			<screen>
# usermod -G wheel www

# id www
uid=501(www) gid=501(www) groups=501(www),10(wheel)
			</screen>
			<para>没有加入到wheel组的用户使用su时会提示密码不正确。</para>
			<screen>
$ su - root
Password:
su: incorrect password
			</screen>
		</section>
	</section>

<!--

	<section>
		<title>数据库安全</title>
		<para>我们以MySQL为例，讲解怎样控制DBA权限。稍加修改即可用于oracle等服务器</para>
		<orderedlist>
			<listitem>
				<para>DBA 没有系统SSH帐号，只有数据库帐号</para>
			</listitem>
			<listitem>
				<para>系统管理员只能有SSH系统帐号，没有数据库帐号</para>
			</listitem>
			<listitem>
				<para>DBA 可备份数据库，还原数据库指定的备份文件，但是接触不到备份文件</para>
			</listitem>
			<listitem>
				<para>DBA 有权重启数据库以及修复损坏库/表文件，通过工具完成，而不是登录SSH运行命令</para>
			</listitem>
		</orderedlist>

		<section>
			<title>数据库客户端安全</title>
			<para>DBA不需要通过SSH登录数据库服务器，然后运行mysql/sqlplus在登录数据库</para>


			<orderedlist>
				<listitem>
					<para>用户不能进入到Shell环境</para>
					<para>例如普通用户一旦登录web服务器可以看到web程序中的数据库配置</para>
				</listitem>
				<listitem>
					<para>用户可以了解OS工作状态如内存,cpu,网络等等</para>
					<para>例如：ping, tracepath, top, free, netstat</para>
				</listitem>
				<listitem>
					<para>可以查看系统部分日志</para>
				</listitem>
			</orderedlist>



				<orderedlist>
					<listitem>
						<para>与Shell相同的提示符</para>
					</listitem>
					<listitem>
						<para>提供TAB补齐</para>
					</listitem>
					<listitem>
						<para>上下光标键翻看历史命令，左右光标改变位置，Home/End 键到行首与行尾</para>
					</listitem>
					<listitem>
						<para>Ctrl+R 搜索， Ctrl+D 退出</para>
					</listitem>
					<listitem>
						<para>Ctrl+S,Ctrl+Q 等等</para>
					</listitem>
				</orderedlist>


				<para>例如用户输入 cd /aaa 经过过滤器后， cd /home/usr/aaa</para>
				<para>rm -rf /usr/local 提示拒绝等等</para>
				<para>我已经使用python实现上面的大部分功能（因为python受到很多限制）如果使用C可以100%实现，需要你的想想力了</para>




			<section>
				<title>mysql 管理</title>
				<para>/etc/php5/fpm/pool.d/www.conf</para>
				<screen>
				<![CDATA[

				]]>
				</screen>
				<para>进入mysql客户端</para>
				<screen>
				<![CDATA[

				]]>
				</screen>
				<note>
					<title>安全提示</title>
					<orderedlist>
						<listitem>
							<para>从安全角度看，你可以去掉输入密码的过程。在终端提示符下输入</para>
							<para>Enter password:</para>
						</listitem>
						<listitem>
							<para>还可以写入～/.my.conf文件</para>
							<para>这样ssh mysql@example.com的时候输入第一道密码，然后进入mysql不需要输入密码</para>
						</listitem>
						<listitem>
							<para>如果需要输入密码对话到建议删除.bash_history</para>
							<para>rm -rf .bash_history</para>
							<para>ln -s /dev/null .bash_history</para>
						</listitem>
					</orderedlist>
				</note>
			</section>

			<section>
				<title>~/.mysql_history</title>
				<para>通过~/.mysql_history文件记录DBA操作记录</para>
				<para>插入时间点，在~/.bashrc中加入下面命令</para>
				<screen>
				<![CDATA[
cat >> ~/.bashrc <<EODdd
echo `date` >> ~/.mysql_dhistory
EOD
				]]>
				</screen>
				<screen>
$ tail ~/.bashrc
echo `date` >> ~/.mysql_history
				</screen>
				<para>查看实际效果</para>
				<screen>
$ tail ~/.mysql_history
EXPLAIN SELECT * FROM stuff where id=3 \G
EXPLAIN SELECT * FROM stuff where id='3' \G
EXPLAIN SELECT * FROM stuff where id='2' \G
Mon Feb 27 09:15:18 CST 2012
EXPLAIN SELECT * FROM stuff where id='2' and created = '2012-02-01' \G
EXPLAIN SELECT * FROM stuff where id='1' and created = '2012-02-01' \G
EXPLAIN SELECT * FROM stuff where id='3' and created = '2012-02-01' \G
EXPLAIN SELECT * FROM stuff where id='2' and created = '2012-02-01' \G
EXPLAIN SELECT * FROM stuff where id='2' or created = '2012-02-01' \G
EXPLAIN SELECT * FROM stuff where id='2' and created = '2012-02-01' \G
Mon Feb 27 11:48:37 CST 2012
				</screen>
			</section>
		</section>
		<section>
			<title>mysqldump 安全</title>
			<section>
				<title>数据备份</title>
				<screen>
				<![CDATA[
MySQL Client
             ┌───┤ MySQL Adminstrator ├───┐
             │ Menu                       │
             │                            │
             │       1 MySQL Manager      │
             │       2 MySQL Backup       │
             │       2 MySQL Restore      │
             │                            │
             │                            │
             │    <Ok>        <Cancel>    │
             │                            │
             └────────────────────────────┘
				]]>
				</screen>

				<screen>
				<![CDATA[
MySQL Client
        ┌────────┤ MySQL Adminstrator ├────────┐
        │ Database Host                        │
        │                                      │
        │        127.0.0.1  localhost          │
        │        172.16.0.1 mysql master       │
        │        172.16.0.2 mysql slave        │
        │                                      │
        │       <Ok>           <Cancel>        │
        │                                      │
        └──────────────────────────────────────┘
				]]>
				</screen>
				<screen>
				<![CDATA[

        ┌────────┤ MySQL Adminstrator ├────────┐
        │ User                                 │
        │                                      │
        │ root________________________________ │
        │                                      │
        │       <Ok>           <Cancel>        │
        │                                      │
        └──────────────────────────────────────┘

        ┌────────┤ MySQL Adminstrator ├────────┐
        │ Password                             │
        │                                      │
        │ ****________________________________ │
        │                                      │
        │       <Ok>           <Cancel>        │
        │                                      │
        └──────────────────────────────────────┘
				]]>
				</screen>

				<screen>
				<![CDATA[

        ┌────────┤ MySQL Adminstrator ├────────┐
        │ Backup File Name                     │
        │                                      │
        │ 2010-12-12.01:00:00_________________ │
        │                                      │
        │       <Ok>           <Cancel>        │
        │                                      │
        └──────────────────────────────────────┘
				]]>
				</screen>
				<screen>
				<![CDATA[

        ┌────────┤ MySQL Adminstrator ├────────┐
        │                                      │
        │ Backup?                              │
        │                                      │
        │                                      │
        │        <Yes>           <No>          │
        │                                      │
        └──────────────────────────────────────┘
				]]>
				</screen>

			</section>

		</section>
		<section>
			<title>crontab 定时备份脚本于安全</title>
			<para>网上备份脚本很多，但考虑都不周全。</para>
			<para>这里增加了 umask 0077 保证创建备份文件只能是创建者跟root可以访问，其他用户没有权限，保证了备份档案的安全。</para>
			<para>find $BACKUP_DIR -type f -mtime +$COPIES -delete 是负责备份的份数管理, 过期数据定时删除</para>
			<para>创建专用的备份帐号</para>
			<screen>
grant select, lock tables on *.* to 'backup'@'192.168.1.200' identified by "123456";
			</screen>
			<para>crontab 备份脚本</para>
			<screen>
			<![CDATA[

			]]>
			</screen>
			<para>/srv/bin/backup 安全也至关重要，否则会泄漏备份用户的密码</para>
			<screen>
# chown mysql:mysql /srv/bin/backup
# chmod 500 /srv/bin/backup
			</screen>
			<para>mysqldump 的安全</para>
			<screen>
# chown 700 /usr/bin/mysqldump
			</screen>
		</section>
		<section>
			<title>数据库归档文件</title>
			<para>一般数据库服务器上可以保留一周的备份数据，历史数据需要保存到服务器以外的带库或者阵列柜中，怎么样保证这些数据的安全呢？ 我们采用下面方式</para>
			<orderedlist>
				<listitem>
					<para>制作PGP/GPG密钥，密钥放置在数据库服务器上，证书做好备份，否则一旦丢失，将无法在将备份文件恢复</para>
				</listitem>
				<listitem>
					<para>数据库备份后，首先进行压缩处理</para>
				</listitem>
				<listitem>
					<para>然后使用公钥证书进行GPG/PGP数据加密</para>
				</listitem>
				<listitem>
					<para>这时可以放心的将备份数据库搬出数据库服务器到带库或磁盘阵列柜中</para>
				</listitem>
			</orderedlist>
			<para>恢复数据，将数据库备份文件复制到该数据库服务器，然后用私钥解密备份文件，再恢复到数据库到中</para>
		</section>
		<section>
			<title>开发与测试环境的数据库安全问题</title>
			<para>有时候需要将生产环境的数据复制到开发环境上，例如，测试的时候，重现bug需要真实数据，开发环境的模拟数据无法满足要求，这时需要将生产环境的数据拉到测试或开发环境。如果保证数据的安全非常重要。</para>
			<para>最有效的手段是数据混淆，将重要的数据进行混淆扰乱顺序等等</para>
			<para>扰乱手段有</para>
			<orderedlist>
				<listitem>
				颠倒顺序
				</listitem>
				<listitem>
				曾加干扰词
				</listitem>
				<listitem>
				重置或替换数据，例如密码可以全部改为test (update user set passwd='test')
				</listitem>
				<listitem>
				拼装数据 如 （131，137，135，133，139，138，168）后面加8位随机数
				</listitem>
			</orderedlist>
		</section>
		<section>
			<title>与数据库有关的服务器安全问题</title>
			<para>其他服务器不能安装mysql客户端与mysqldump备份工具</para>
			<para>例如：web服务器只能通过php/jdbc/odbc等链接mysql数据库,
web服务器卸载 mysql，mysqldump工具，防止用户登录查询以及将数据库远程备份，然后通过web下载数据库</para>
			<screen>
			<![CDATA[
# adduser www
# passwd www
# chmod 500 -R /usr/local/webserver/mysql/bin/*
# chown root:root -R /usr/local/webserver/mysql/bin/*
			]]>
			</screen>

		</section>

	</section>

 -->

</article>
